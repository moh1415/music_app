{"version":3,"sources":["components/sections/FeedbackForm.js"],"names":["captchaToken","FeedbackForm","_useContext","useContext","GlobalContext","_useContext2","Object","D_prog_react_native_react_mus_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","D_prog_react_native_react_mus_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectDestructuringEmpty__WEBPACK_IMPORTED_MODULE_0__","dispatch","setSnackbarMsg","React","useCallback","data","type","snippet","_React$useState","useState","_React$useState2","isSending","setIsSending","formEl","useRef","useEffect","loadReCaptcha","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","component","ref","onSubmit","e","formData","FormData","current","name","get","email","message","preventDefault","post","captcha","axios","then","response","console","log","status","reset","catch","error","container","required","justify","style","width","maxWidth","margin","react_recaptcha_v3__WEBPACK_IMPORTED_MODULE_7__","sitekey","action","verifyCallback","token","document","querySelector","remove","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","id","label","autoComplete","variant","fullWidth","color","multiline","rows","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","transform","borderRadius","_material_ui_core__WEBPACK_IMPORTED_MODULE_6__","marginTop","disabled"],"mappings":"sGAaIA,uGA4IWC,UA3IM,WAAM,IAAAC,EACFC,qBAAWC,KADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAAI,OAAAE,EAAA,EAAAF,CAAAD,EAAA,QACdI,EADcJ,EAAA,GAGnBK,EAAiBC,IAAMC,YAC3B,SAAAC,GACEJ,EAAS,CAAEK,KAAM,iBAAkBC,QAASF,KAE9C,CAACJ,IAPsBO,EASSL,IAAMM,UAAS,GATxBC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GASlBG,EATkBD,EAAA,GASPE,EATOF,EAAA,GAUnBG,EAASV,IAAMW,OAAO,MAyC5BX,IAAMY,UAAU,WACdC,wBAAc,6CACb,IAUH,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,OACVC,IAAKT,EACLU,SAvDe,SAAAC,GAEjBZ,GAAa,GACb,IAAMa,EAAW,IAAIC,SAASb,EAAOc,SAC/BC,EAAOH,EAASI,IAAI,QACpBC,EAAQL,EAASI,IAAI,SACrBE,EAAUN,EAASI,IAAI,WAE7BL,EAAEQ,iBAEF,IAAMC,EAAO,CACXL,KAAMA,EACNE,MAAOA,EACPC,QAASA,EACTG,QAAS1C,GAGX2C,IACGF,KAAK,qCAAsCA,GAC3CG,KAAK,SAASC,GACbC,QAAQC,IAAIF,EAAShC,KAAKmC,QAE1B3B,EAAOc,QAAQc,QACfvC,EAAemC,EAAShC,KAAKmC,QAC7B5B,GAAa,KAEd8B,MAAM,SAASC,GAEVA,EAAMN,UACsB,MAA1BM,EAAMN,SAASG,SACjB3B,EAAOc,QAAQc,QAEfvC,EAAe,gCAGnBU,GAAa,MAqBfgC,WAAS,EACTC,UAAQ,EACRC,QAAQ,SACRC,MAAO,CAAEC,MAAO,MAAOC,SAAU,QAASC,OAAQ,WAElDjC,EAAAC,EAAAC,cAACgC,EAAA,UAAD,CACEC,QAAQ,2CACRC,OAAO,cACPC,eArBiB,SAAAC,GAErB/D,EAAe+D,EACIC,SAASC,cAAc,qBAC/BC,YAmBTzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,OACNvD,KAAK,OACLsB,KAAK,OACLkC,aAAa,OACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAEV5B,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,QACNvD,KAAK,QACLsB,KAAK,QACLkC,aAAa,QACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAEV5B,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,WACNK,WAAS,EACTC,KAAK,IACL7D,KAAK,OACLsB,KAAK,UACLkC,aAAa,WACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAETlC,EACCM,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACErB,MAAO,CACLC,MAAO,OACPqB,UAAW,oBACXC,aAAc,SAGhB,KACJrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACExB,MAAO,CAAEyB,UAAW,QACpBT,QAAQ,WACRE,MAAM,UACN3D,KAAK,SACLmE,WAAU9D,GAGTA,EAAY,mBAAqB","file":"static/js/11.482badab.chunk.js","sourcesContent":["import React, {useContext, useCallback} from \"react\";\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  CircularProgress,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\r\nimport axios from \"axios\";\r\nimport { GlobalContext } from \"../GlobalState\";\r\n\r\nlet captchaToken;\r\nconst FeedbackForm = () => {\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n\r\n  const setSnackbarMsg = React.useCallback(\r\n    data => {\r\n      dispatch({ type: \"setSnackbarMsg\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n  const [isSending, setIsSending] = React.useState(false);\r\n  const formEl = React.useRef(null);\r\n\r\n  const submitForm = e => {\r\n    // set state to sending\r\n    setIsSending(true);\r\n    const formData = new FormData(formEl.current);\r\n    const name = formData.get(\"name\");\r\n    const email = formData.get(\"email\");\r\n    const message = formData.get(\"message\");\r\n\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      name: name,\r\n      email: email,\r\n      message: message,\r\n      captcha: captchaToken\r\n    };\r\n\r\n    axios\r\n      .post(\"https://xmailerr.glitch.me/contact\", post)\r\n      .then(function(response) {\r\n        console.log(response.data.status);\r\n        // also clear the form\r\n        formEl.current.reset();\r\n        setSnackbarMsg(response.data.status);\r\n        setIsSending(false);\r\n      })\r\n      .catch(function(error) {\r\n        // console.log(error.response.status);\r\n        if (error.response) {\r\n          if (error.response.status === 429) {\r\n            formEl.current.reset();\r\n\r\n            setSnackbarMsg(\"We accept limited feedback!\");\r\n          }\r\n        }\r\n        setIsSending(false);\r\n      });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadReCaptcha(\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\");\r\n  }, []);\r\n\r\n  const verifyCallback = token => {\r\n    // console.log(token);\r\n    captchaToken = token;\r\n    const captchaBox = document.querySelector(\".grecaptcha-badge\");\r\n    captchaBox.remove();\r\n    // remove captcha badge\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      component=\"form\"\r\n      ref={formEl}\r\n      onSubmit={submitForm}\r\n      container\r\n      required\r\n      justify=\"center\"\r\n      style={{ width: \"90%\", maxWidth: \"500px\", margin: \"0 auto\" }}\r\n    >\r\n      <ReCaptcha\r\n        sitekey=\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\"\r\n        action=\"action_name\"\r\n        verifyCallback={verifyCallback}\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Name\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        autoComplete=\"name\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        color=\"primary\"\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Email\"\r\n        type=\"email\"\r\n        name=\"email\"\r\n        autoComplete=\"email\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        color=\"primary\"\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Feedback\"\r\n        multiline\r\n        rows=\"4\"\r\n        type=\"text\"\r\n        name=\"message\"\r\n        autoComplete=\"feedback\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        color=\"primary\"\r\n        required\r\n      />\r\n      {isSending ? (\r\n        <LinearProgress\r\n          style={{\r\n            width: \"100%\",\r\n            transform: \"translateY(-12px)\",\r\n            borderRadius: \"2px\"\r\n          }}\r\n        />\r\n      ) : null}\r\n      <Button\r\n        style={{ marginTop: \"10px\" }}\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        disabled={isSending ? true : false}\r\n      >\r\n        {/* if sending is true then show circular progress */}\r\n        {isSending ? \"Sending Feedback\" : \"Send Feedback\"}\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FeedbackForm;\r\n"],"sourceRoot":""}